<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - EasyGmail</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center space-x-8">
                    <a href="/" class="flex items-center">
                        <h1 class="text-2xl font-bold text-blue-600">EasyGmail</h1>
                    </a>
                    <span class="text-gray-600">Dashboard</span>
                </div>
                <div class="flex items-center space-x-4">
                    <a href="/privacy" class="text-gray-600 hover:text-gray-900 px-3 py-2">Privacy Policy</a>
                    <a href="/terms" class="text-gray-600 hover:text-gray-900 px-3 py-2">Terms of Service</a>
                    <span class="text-gray-600"><%= user.email %></span>
                </div>
            </div>
        </div>
    </nav>

    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div class="px-4 py-6 sm:px-0">
            <div class="bg-white rounded-lg shadow-lg px-5 py-6 sm:px-6">
                <div class="space-y-6">
                    <div>
                        <h2 class="text-2xl font-bold text-gray-900">Summary Settings</h2>
                        <p class="mt-2 text-gray-600">Configure how and when you want to receive your email summaries.</p>
                    </div>

                    <form id="settingsForm" class="space-y-8">
                        <!-- Email Delivery Settings -->
                        <div class="bg-gray-50 rounded-lg p-6">
                            <h3 class="text-lg font-semibold text-blue-600 mb-4">Email Delivery</h3>
                            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                                <div>
                                    <label for="summaryEmail" class="block text-sm font-medium text-gray-700 mb-2">
                                        Summary Delivery Email
                                    </label>
                                    <input type="email" 
                                           name="summaryEmail" 
                                           id="summaryEmail" 
                                           value="<%= user.summaryEmail %>"
                                           class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                           required>
                                </div>
                                <div>
                                    <label for="deliveryTime" class="block text-sm font-medium text-gray-700 mb-2">
                                        Delivery Time
                                    </label>
                                    <input type="time" 
                                           id="deliveryTime" 
                                           name="deliveryTime" 
                                           value="<%= user.preferences?.deliveryTime ? 
                                                  String(user.preferences.deliveryTime.hours).padStart(2, '0') + ':' + 
                                                  String(user.preferences.deliveryTime.minutes).padStart(2, '0') : 
                                                  '18:00' %>"
                                           class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                           required>
                                </div>
                            </div>
                        </div>

                        <!-- Email Filter Settings -->
                        <div class="bg-gray-50 rounded-lg p-6">
                            <h3 class="text-lg font-semibold text-blue-600 mb-4">Email Filters</h3>
                            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-3">
                                        Include Categories
                                    </label>
                                    <div class="space-y-3">
                                        <div class="flex items-center">
                                            <input type="checkbox" id="primaryInbox" name="categories" value="primary" class="h-5 w-5 text-blue-600 rounded" checked>
                                            <label for="primaryInbox" class="ml-3 text-gray-700">Primary Inbox</label>
                                        </div>
                                        <div class="flex items-center">
                                            <input type="checkbox" id="socialInbox" name="categories" value="social" class="h-5 w-5 text-blue-600 rounded">
                                            <label for="socialInbox" class="ml-3 text-gray-700">Social</label>
                                        </div>
                                        <div class="flex items-center">
                                            <input type="checkbox" id="promotionsInbox" name="categories" value="promotions" class="h-5 w-5 text-blue-600 rounded">
                                            <label for="promotionsInbox" class="ml-3 text-gray-700">Promotions</label>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <label for="lookbackDays" class="block text-sm font-medium text-gray-700 mb-2">
                                        Include Unread Emails From Last
                                    </label>
                                    <select id="lookbackDays" 
                                            name="lookbackDays" 
                                            class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500">
                                        <option value="1">24 hours</option>
                                        <option value="2">2 days</option>
                                        <option value="3">3 days</option>
                                        <option value="7">1 week</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="flex justify-end space-x-4">
                            <button type="button"
                                    id="previewButton"
                                    class="px-6 py-2 border border-gray-300 rounded-lg shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                Preview Summary
                            </button>
                            <button type="button"
                                    id="testButton"
                                    class="px-6 py-2 border border-gray-300 rounded-lg shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                Send Test Summary
                            </button>
                            <button type="submit"
                                    class="px-6 py-2 border border-transparent rounded-lg shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                                Save Changes
                            </button>
                        </div>
                    </form>

                    <div id="successMessage" class="hidden mt-4 bg-green-50 border border-green-400 text-green-700 px-4 py-3 rounded-lg">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                                </svg>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm font-medium">Settings saved successfully!</p>
                            </div>
                        </div>
                    </div>

                    <div id="previewSection" class="hidden mt-8">
                        <h3 class="text-xl font-semibold text-gray-900 mb-4">Summary Preview</h3>
                        <div class="space-y-6">
                            <div class="bg-gray-50 p-6 rounded-lg">
                                <h4 class="text-lg font-medium text-blue-600 mb-3">ðŸ“Š Stats</h4>
                                <ul class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                    <li class="flex items-center">
                                        <span class="text-gray-600">Total unread:</span>
                                        <span id="totalEmails" class="ml-2 font-medium">-</span>
                                    </li>
                                    <li class="flex items-center">
                                        <span class="text-gray-600">Looking back:</span>
                                        <span id="lookbackDays" class="ml-2 font-medium">-</span>
                                    </li>
                                    <li class="flex items-center">
                                        <span class="text-gray-600">Categories:</span>
                                        <span id="categories" class="ml-2 font-medium">-</span>
                                    </li>
                                    <li class="flex items-center">
                                        <span class="text-gray-600">Delivery time:</span>
                                        <span id="deliveryTime" class="ml-2 font-medium">-</span>
                                    </li>
                                    <li class="flex items-center col-span-2">
                                        <span class="text-gray-600">Will be sent to:</span>
                                        <span id="summaryEmail" class="ml-2 font-medium">-</span>
                                    </li>
                                </ul>
                            </div>
                            
                            <div class="bg-gray-50 p-6 rounded-lg">
                                <h4 class="text-lg font-medium text-blue-600 mb-3">ðŸ¤– AI Summary</h4>
                                <div id="aiSummary" class="text-gray-700 whitespace-pre-wrap">
                                    Loading...
                                </div>
                            </div>

                            <div class="bg-gray-50 p-6 rounded-lg">
                                <h4 class="text-lg font-medium text-blue-600 mb-3">ðŸ“§ Sample Emails</h4>
                                <div id="sampleEmails" class="space-y-4">
                                    Loading...
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        // Load current settings when page loads
        window.addEventListener('load', async () => {
            try {
                const response = await fetch('/api/current-settings');
                if (response.ok) {
                    const settings = await response.json();
                    document.getElementById('summaryEmail').value = settings.summaryEmail;
                    
                    // Format the time value
                    if (settings.preferences?.deliveryTime) {
                        const hours = String(settings.preferences.deliveryTime.hours).padStart(2, '0');
                        const minutes = String(settings.preferences.deliveryTime.minutes).padStart(2, '0');
                        document.getElementById('deliveryTime').value = `${hours}:${minutes}`;
                    } else {
                        document.getElementById('deliveryTime').value = '18:00';
                    }
                    
                    document.getElementById('lookbackDays').value = settings.preferences?.lookbackDays || '1';
                    
                    // Set checkboxes
                    const categories = settings.preferences?.categories || ['primary'];
                    document.querySelectorAll('input[name="categories"]').forEach(cb => {
                        cb.checked = categories.includes(cb.value);
                    });
                }
            } catch (error) {
                console.error('Error loading settings:', error);
            }
        });

        // Preview button handler
        document.getElementById('previewButton').addEventListener('click', async () => {
            console.log('Preview button clicked');
            try {
                const response = await fetch('/api/preview-summary');
                console.log('Preview response status:', response.status);
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to generate preview');
                }
                
                const preview = await response.json();
                console.log('Preview data:', preview);
                
                const previewSection = document.getElementById('previewSection');
                
                // Update stats
                document.getElementById('totalEmails').textContent = preview.totalEmails;
                document.getElementById('lookbackDays').textContent = preview.lookbackDays;
                document.getElementById('categories').textContent = preview.categories.join(', ');
                document.getElementById('deliveryTime').textContent = 
                    `${String(preview.deliveryTime.hours).padStart(2, '0')}:${String(preview.deliveryTime.minutes).padStart(2, '0')}`;
                document.getElementById('summaryEmail').textContent = preview.summaryEmail;

                // Update AI summary
                document.getElementById('aiSummary').textContent = preview.sampleSummary || 'No AI summary available';

                // Update sample emails
                const sampleEmailsHtml = preview.sampleEmails.map(email => `
                    <div class="border-b border-gray-200 pb-4">
                        <p class="text-sm text-gray-500">${email.from}</p>
                        <p class="font-medium text-gray-900">${email.subject}</p>
                        <p class="text-gray-600 text-sm mt-1">${email.snippet}</p>
                    </div>
                `).join('');
                
                document.getElementById('sampleEmails').innerHTML = sampleEmailsHtml || 'No sample emails available';
                
                previewSection.classList.remove('hidden');
            } catch (error) {
                console.error('Error generating preview:', error);
                alert('Failed to generate preview: ' + error.message);
            }
        });

        // Test button handler
        document.getElementById('testButton').addEventListener('click', async () => {
            if (confirm('Send a test summary now?')) {
                try {
                    const response = await fetch('/api/send-test-summary', { 
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Failed to send test summary');
                    }

                    const result = await response.json();
                    alert('Test summary sent! Check your email.');
                } catch (error) {
                    console.error('Error sending test summary:', error);
                    alert('Failed to send test summary: ' + error.message);
                }
            }
        });

        // Form submit handler
        document.getElementById('settingsForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const summaryEmail = document.getElementById('summaryEmail').value;
            const deliveryTime = document.getElementById('deliveryTime').value;
            const lookbackDays = document.getElementById('lookbackDays').value;
            const categories = Array.from(document.querySelectorAll('input[name="categories"]:checked'))
                                  .map(cb => cb.value);
            
            try {
                const response = await fetch('/api/update-preferences', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        summaryEmail,
                        deliveryTime,
                        lookbackDays,
                        categories
                    }),
                });

                if (response.ok) {
                    const successMessage = document.getElementById('successMessage');
                    successMessage.classList.remove('hidden');
                    setTimeout(() => {
                        successMessage.classList.add('hidden');
                    }, 3000);
                } else {
                    throw new Error('Failed to update settings');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to save settings. Please try again.');
            }
        });
    </script>
</body>
</html> 